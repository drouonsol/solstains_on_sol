{"version":3,"sources":["candy-machine.ts","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","ms","ConnectButton","styled","WalletDialogButton","CounterText","MintContainer","div","MintButton","Button","renderCounter","days","hours","minutes","seconds","completed","Home","props","useState","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","setItemsAvailable","setItemsRedeemed","setItemsRemaining","open","message","severity","undefined","alertState","setAlertState","startDate","setStartDate","useAnchorWallet","setCandyMachine","refreshCandyMachineState","onMint","mintTxId","txTimeout","msg","code","indexOf","getBalance","balance","LAMPORTS_PER_SOL","useEffect","style","color","backgroundColor","display","textAlign","justifyContent","height","fontFamily","fontWeight","flexDirection","padding","backgroundImage","border","borderRadius","src","width","borderImage","borderColor","disabled","onClick","variant","className","CircularProgress","date","onMount","onComplete","renderer","href","Snackbar","autoHideDuration","onClose","Alert","process","network","Connection","startDateSeed","parseInt","theme","createTheme","palette","type","overrides","MuiButtonBase","root","MuiButton","textTransform","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","logo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAQaA,EAAwB,IAAIC,IAAYC,UACnD,+CAGIC,EAA0C,IAAIF,IAAYC,UAC9D,gDAGIE,EAA4B,IAAIH,IAAYC,UAChD,+CAiBWG,EAAqC,uCAAG,WACnDC,EACAC,EACAC,GAHmD,mCAAAC,EAAA,6DAInDC,EAJmD,+BAId,SACrCC,EALmD,gCAO/CC,GAAO,EACPC,EAAoD,CACtDC,KAAM,EACNC,cAAe,EACfC,IAAK,MAEHC,EAAQ,EAbuC,SAcpC,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,SAAAX,EAAA,sDACzBY,YAAW,WACLT,IAGJA,GAAO,EACPU,QAAQC,IAAI,4BACZH,EAAO,CAAEb,SAAS,OACjBA,GACH,IACEU,EAAQT,EAAWgB,YACjBlB,GACA,SAACmB,EAAaC,GACZd,GAAO,EACPC,EAAS,CACPG,IAAKS,EAAOT,IACZF,KAAMY,EAAQZ,KACdC,cAAe,GAEbU,EAAOT,KACTM,QAAQC,IAAI,yBAA0BE,EAAOT,KAC7CI,EAAOP,KAEPS,QAAQC,IAAI,yBAA0BE,GACtCN,EAAQN,MAGZH,GAEF,MAAOiB,GACPf,GAAO,EACPU,QAAQM,MAAM,oBAAqBtB,EAAMqB,GA/BlB,UAiCjBf,IAAQD,EAjCS,uBAmCvB,sBAAC,4BAAAF,EAAA,+EAEmCD,EAAWqB,qBAAqB,CAC9DvB,IAHL,OAESwB,EAFT,OAKGjB,EAASiB,GAAqBA,EAAkBC,MAAM,GACjDnB,IACEC,EAEMA,EAAOG,KAChBM,QAAQC,IAAI,iBAAkBjB,EAAMO,GACpCD,GAAO,EACPQ,EAAOP,EAAOG,MACJH,EAAOE,eAGjBO,QAAQC,IAAI,wBAAyBjB,EAAMO,GAC3CD,GAAO,EACPO,EAAQN,IAJRS,QAAQC,IAAI,4BAA6BjB,EAAMO,GAN/CS,QAAQC,IAAI,uBAAwBjB,EAAMO,IARjD,gDAsBQD,GACHU,QAAQC,IAAI,8BAA+BjB,EAA3C,MAvBL,wDAAD,GAnCuB,SA8DjB0B,EAAM,KA9DW,iEAAZ,yDAdoC,cAcnDnB,EAdmD,OAiF/CL,EAAWyB,wBAAwBhB,IACrCT,EAAW0B,wBAAwBjB,GAErCL,GAAO,EACPU,QAAQC,IAAI,mBAAoBV,GArFmB,kBAsF5CA,GAtF4C,4CAAH,0DAyF/BsB,EAA0C,SAC3DC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAO,CACX,CAAEC,OAAQJ,EAAOK,UAAU,EAAMC,YAAY,GAC7C,CAAEF,OAAQL,EAAwBM,UAAU,EAAOC,YAAY,GAC/D,CAAEF,OAAQH,EAAeI,UAAU,EAAOC,YAAY,GACtD,CAAEF,OAAQF,EAAqBG,UAAU,EAAOC,YAAY,GAC5D,CACEF,OAAQxC,IAAY2C,cAAcC,UAClCH,UAAU,EACVC,YAAY,GAEd,CAAEF,OAAQK,IAAkBJ,UAAU,EAAOC,YAAY,GACzD,CACEF,OAAQxC,IAAY8C,mBACpBL,UAAU,EACVC,YAAY,IAGhB,OAAO,IAAI1C,IAAY+C,uBAAuB,CAC5CR,OACAK,UAAW1C,EACX8C,KAAMC,EAAOC,KAAK,OAKTC,EAAoB,uCAAG,WAClCC,EACAC,EACA9C,GAHkC,+BAAAC,EAAA,6DAK5B8C,EAAW,IAAItD,IAAgBO,EAAY6C,EAAc,CAC7DG,oBAAqB,WANW,SAShBvD,IAAewD,SAC/BzD,EACAuD,GAXgC,cAS5BG,EAT4B,OAc5BC,EAAU,IAAI1D,IAAeyD,EAAK1D,EAAuBuD,GACzDK,EAAe,CACnBC,GAAIP,EACJ9C,aACAmD,WAlBgC,SAqBTA,EAAQG,QAAQF,aAAaG,MAAMT,GArB1B,cAqB5BU,EArB4B,OAuB5BC,EAAiBD,EAAMf,KAAKgB,eAAeC,WAC3CC,EAAgBH,EAAMG,cAAcD,WACpCE,EAAiBH,EAAiBE,EAEpCE,EAAaL,EAAMf,KAAKoB,WAAWH,WACvCG,EAAa,IAAIC,KAAkB,IAAbD,GAEtB/C,QAAQC,IAAI,CACV0C,iBACAE,gBACAC,iBACAC,eAlCgC,kBAqC3B,CACLT,eACAK,iBACAE,gBACAC,iBACAC,eA1CgC,4CAAH,0DA8C3BE,EAAgB,uCAAG,WACvBC,GADuB,SAAA/D,EAAA,sEAIfR,IAAYC,UAAUuE,mBAC1B,CACEvB,EAAOC,KAAK,YACZ/C,EAA0BsE,WAC1BF,EAAKE,WACLxB,EAAOC,KAAK,YAEd/C,GAXmB,uCAarB,IAbqB,2CAAH,sDAgBhBuE,EAAW,uCAAG,WAClBH,GADkB,SAAA/D,EAAA,sEAIVR,IAAYC,UAAUuE,mBAC1B,CACEvB,EAAOC,KAAK,YACZ/C,EAA0BsE,WAC1BF,EAAKE,YAEPtE,GAVc,uCAYhB,IAZgB,2CAAH,sDAeXwE,EAAc,uCAAG,WACrBC,EACAL,GAFqB,SAAA/D,EAAA,sEAKbR,IAAYC,UAAUuE,mBAC1B,CAACI,EAAOH,WAAY5B,IAAiB4B,WAAYF,EAAKE,YACtDvE,GAPiB,uCASnB,IATmB,2CAAH,wDAYP2E,EAAY,uCAAG,WAC1BlB,EACAmB,EACA1C,EACA2C,GAJ0B,2BAAAvE,EAAA,6DAMpB+D,EAAOvE,IAAYgF,QAAQC,WANP,SAONN,EAAevC,EAAOmC,EAAKW,WAPrB,cAOpBC,EAPoB,OAQlB5E,EAAwBoD,EAAxBpD,WAAYmD,EAAYC,EAAZD,QARM,SASHgB,EAAYH,EAAKW,WATd,cASpBE,EAToB,iBAUEd,EAAiBC,EAAKW,WAVxB,eAUpBG,EAVoB,iBAYP9E,EAAW+E,kCAC5BC,IAAWC,MAba,eAYpBC,EAZoB,iBAgBb/B,EAAQgC,IAAIC,QAAQ,CAC/BC,SAAU,CACRd,SACAnB,aAAcA,EAAaC,GAC3BxB,MAAOA,EACPwC,OAAQG,EACRR,KAAMA,EAAKW,UACXE,WACAC,gBACAQ,cAAezD,EACf0D,gBAAiB1D,EACjB2D,qBAAsB5F,EACtB6F,aAAcnD,IACdoD,cAAejG,IAAY2C,cAAcC,UACzC6C,KAAMzF,IAAY8C,mBAClBoD,MAAOlG,IAAYmG,qBAErBC,QAAS,CAAC7B,GACV8B,aAAc,CACZrG,IAAY2C,cAAc2D,cAAc,CACtCC,WAAYnE,EACZoE,iBAAkBjC,EAAKW,UACvBuB,MAAOlB,IAAWC,KAClBkB,SAAUjB,EACV7C,UAAWC,MAEb8D,IAAMC,0BACJ/D,IACA0B,EAAKW,UACL,EACA9C,EACAA,GAEFF,EACEiD,EACA/C,EACAA,EACAmC,EAAKW,WAEPyB,IAAME,wBACJhE,IACA0B,EAAKW,UACLC,EACA/C,EACA,GACA,MA7DoB,qFAAH,4DAuEnBL,EAAQ,SAAC+E,GACb,OAAO,IAAI7F,SAAQ,SAACC,GAAD,OAAaE,WAAWF,EAAS4F,S,uYC3RhDC,EAAgBC,YAAOC,IAAPD,CAAH,0BAEbE,EAAcF,IAAOxB,KAAV,0BAEX2B,EAAgBH,IAAOI,IAAV,0BAEbC,EAAaL,YAAOM,IAAPN,CAAH,0BAmYVO,EAAgB,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,QAA8B,EAArBC,UACtD,OACE,eAACV,EAAD,WACGO,EAAsB,IAAbD,GAAQ,GADpB,WACqCE,EADrC,aACwDC,EADxD,eAMWE,EA9XF,SAACC,GACZ,MAA8BC,qBAA9B,mBAAgBC,GAAhB,WACA,EAAgCD,oBAAS,GAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAkCL,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KAEA,EAA4CP,mBAAS,GAArD,mBAAO/D,EAAP,KAAuBuE,EAAvB,KACA,EAA0CR,mBAAS,GAAnD,mBAAsBS,GAAtB,WACA,EAA4CT,mBAAS,GAArD,mBAAO5D,EAAP,KAAuBsE,EAAvB,KAEA,EAAoCV,mBAAqB,CACvDW,MAAM,EACNC,QAAS,GACTC,cAAUC,IAHZ,mBAAOC,EAAP,KAAmBC,EAAnB,KAMA,EAAkChB,mBAAS,IAAI1D,KAAKyD,EAAMkB,YAA1D,mBAAOA,EAAP,KAAkBC,EAAlB,KAEMrE,EAASsE,cACf,EAAwCnB,qBAAxC,oBAAOpE,GAAP,MAAqBwF,GAArB,MAEMC,GAA2B,WAC/B,sBAAC,sCAAA5I,EAAA,yDACMoE,EADN,iEASWzB,YACRyB,EACAkD,EAAMzE,eACNyE,EAAMvH,YAZT,gBAIGoD,EAJH,EAIGA,aACAS,EALH,EAKGA,WACAJ,EANH,EAMGA,eACAG,EAPH,EAOGA,eACAD,EARH,EAQGA,cAOFqE,EAAkBvE,GAClByE,EAAkBtE,GAClBqE,EAAiBtE,GAEjBkE,EAAgC,IAAnBjE,GACb8E,EAAa7E,GACb+E,GAAgBxF,GArBjB,2CAAD,IAyBI0F,GAAM,uCAAG,kCAAA7I,EAAA,kEAEX8H,GAAa,IACT1D,KAAM,OAAIjB,SAAJ,IAAIA,QAAJ,EAAIA,GAAcD,SAHjB,iCAIcmB,YACrBlB,GACAmE,EAAMhD,OACNF,EAAOM,UACP4C,EAAM/C,UARC,cAIHuE,EAJG,gBAWYlJ,YACnBkJ,EACAxB,EAAMyB,UACNzB,EAAMvH,WACN,gBACA,GAhBO,QAmBL,QAREK,EAXG,cAmBL,IAACA,OAAD,EAACA,EAAQG,KAOXgI,EAAc,CACZL,MAAM,EACNC,QAAS,qCACTC,SAAU,UATZG,EAAc,CACZL,MAAM,EACNC,QAAS,GACTC,SAAU,YAvBL,0DAmCPD,EAAU,KAAMa,KAAO,uBACtB,KAAMA,IAQU,MAAf,KAAMC,MACRd,EAAO,YACPP,GAAa,IACW,MAAf,KAAMqB,OACfd,EAAO,sCAXL,KAAMA,QAAQe,QAAQ,WACf,KAAMf,QAAQe,QAAQ,SAC/Bf,EAAO,YACE,KAAMA,QAAQe,QAAQ,WAC/Bf,EAAO,yDAWXI,EAAc,CACZL,MAAM,EACNC,UACAC,SAAU,UAvDD,sBA0DPhE,EA1DO,kCA2DakD,EAAMvH,WAAWoJ,WAAW/E,EAAOM,WA3DhD,QA2DH0E,EA3DG,OA4DT5B,EAAW4B,EAAUC,oBA5DZ,eA8DXvB,GAAa,GACbc,KA/DW,6EAAH,qDAkFZ,OAfAU,qBAAU,WACR,sBAAC,4BAAAtJ,EAAA,0DACKoE,EADL,gCAEyBkD,EAAMvH,WAAWoJ,WAAW/E,EAAOM,WAF5D,OAES0E,EAFT,OAGG5B,EAAW4B,EAAUC,oBAHxB,0CAAD,KAMC,CAACjF,EAAQkD,EAAMvH,aAElBuJ,oBAAUV,GAA0B,CAClCxE,EACAkD,EAAMzE,eACNyE,EAAMvH,aAKN,uBACAwJ,MAAO,GADP,UAQK,qBACAA,MAAO,CACLC,MAAO,QACRC,gBAAiB,QACjBC,QAAS,OACTC,UAAW,SACXC,eAAgB,SAChBC,OAAQ,MACRC,WAAY,SARb,SAWE,mDAGL,qBAAKP,MAAO,CACVG,QAAS,OACXC,UAAW,SACXI,WAAY,OACZC,cAAe,SACfJ,eAAgB,SAChBH,gBAAiB,SACjBQ,QAAS,OACTJ,OAAQ,QACRC,WAAY,QACZI,gBAAiB,sGAVjB,SAeN,sBAAKX,MAAQ,CAAOY,OAAQ,kBACtBC,aAAc,MACdF,gBAAiB,qHACjBD,QAAS,OACTH,WAAY,SAJlB,UAUG,qBAAKO,IAAI,2GAA2Gd,MAAO,CAAEe,MAAO,WAVvI,IAUqJ,qBAAKD,IAAI,2GAA2Gd,MAAO,CAAEe,MAAO,QAASC,YAAa,MAAOC,YAAa,WAVnU,IAUiV,qBAAKH,IAAI,2GAA2Gd,MAAO,CAAEe,MAAO,WAVrd,IAUme,qBAAKD,IAAI,2GAA2Gd,MAAO,CAAEe,MAAO,WAVvmB,IAUqnB,qBAAKD,IAAI,2GAA2Gd,MAAO,CAAEe,MAAO,WAClvB,4BAAG,yFAA4DlG,GAAU,gCAAMZ,EAAN,IAAuBA,UAIhGY,GAAU,4BAAG,0CAAaT,EAAb,UACd,qDAIA,cAACgD,EAAD,UACEvC,EAYA,cAACyC,EAAD,CACE4D,SAAU9C,GAAaE,IAAcJ,EACrCiD,QAAS7B,GACT8B,QAAQ,YACRpB,MAAO,CACLO,WAAY,SACdc,UAAU,iEANZ,SAQGjD,EACC,eACEF,EACFI,EACE,cAACgD,EAAA,EAAD,IAEA,OAGF,cAAC,IAAD,CACEC,KAAMtC,EACNuC,QAAS,qBAAG3D,WAA6BM,GAAY,IACrDsD,WAAY,kBAAMtD,GAAY,IAC9BuD,SAAUlE,MAhChB,cAACR,EAAD,CACAgD,MAAO,CACLO,WAAY,QACZL,gBAAiB,QACjBD,MAAO,UAJT,6BAuCF,uBACA,4BAQD,qBACID,MAAO,CACLC,MAAO,QACRC,gBAAiB,QACjBC,QAAS,OACTC,UAAW,SACXC,eAAgB,SAChBC,OAAQ,MACRC,WAAY,SARjB,SAWM,uCAEN,sBAECP,MAAO,CACLG,QAAS,OACTC,UAAW,SACXI,WAAY,OACZC,cAAe,SACfJ,eAAgB,SAChBH,gBAAiB,SAEjBQ,QAAS,OACTJ,OAAQ,OACRC,WAAY,QACZI,gBAAiB,iGACjBV,MAAO,SAdV,UAkBI,+DAAsC,yDACtC,uBACA,oDAA2B,uDAC3B,uBACA,oEAA2C,kFAC3C,uBACA,gEAAuC,sEAxB3C,UA8BI,qBACAD,MAAO,CACLC,MAAO,QACRC,gBAAiB,QACjBC,QAAS,OACTC,UAAW,SACXC,eAAgB,SAChBC,OAAQ,MACRC,WAAY,SARb,SAWE,2CAGS,sBAEpBP,MAAO,CACLG,QAAS,OACTC,UAAW,SACXI,WAAY,OACZC,cAAe,SACfJ,eAAgB,SAChBH,gBAAiB,SAEjBQ,QAAS,OACTJ,OAAQ,OACRC,WAAY,QACZI,gBAAiB,iGACjBV,MAAO,SAdW,UAiBlB,uBAAM,uBAAM,uBAAM,uBAAM,uBAAM,uBACxB,yCAAgB,wEACf,uBACA,yCAAgB,+GAChB,uBACA,yCAAgB,mJAChB,uBACA,yCACJ,mIAGL,yCACK,gIAOC,sBACAD,MAAO,CACLQ,WAAY,OACZH,eAAgB,SAChBC,OAAQ,MACRH,QAAS,OACTC,UAAW,SACXK,cAAe,MACfP,gBAAiB,OACjBQ,QAAS,QATX,UAeE,uBAGR,mBAAGiB,KAAK,gCAAR,SAAwC,qBAAKb,IAAI,iDAAiDd,MAAO,CAACe,MAAO,YAAmB,mBAAGY,KAAK,gCAAR,SAAwC,qBAAKb,IAAI,+CAA+Cd,MAAO,CAACe,MAAO,eAG7O,cAACa,EAAA,EAAD,CACEjD,KAAMI,EAAWJ,KACjBkD,iBAAkB,IAClBC,QAAS,kBAAM9C,EAAc,2BAAKD,GAAN,IAAkBJ,MAAM,MAHtD,SAKE,cAACoD,EAAA,EAAD,CACED,QAAS,kBAAM9C,EAAc,2BAAKD,GAAN,IAAkBJ,MAAM,MACpDE,SAAUE,EAAWF,SAFvB,SAIGE,EAAWH,gB,kGC3XhB5D,EAAW,IAAI/E,IAAYC,UAC/B8L,gDAGIjH,EAAS,IAAI9E,IAAYC,UAC7B8L,gDAGI1I,EAAiB,IAAIrD,IAAYC,UACrC8L,gDAGIC,EAAUD,SAGVxL,EAAa,IAAIP,IAAYiM,WADnBF,0CAGVG,EAAgBC,SAASJ,aAAyC,IAIlEK,EAAQC,YAAY,CACtBC,QAAS,CACLC,KAAM,QAEVC,UAAW,CACPC,cAAe,CACXC,KAAM,CACFtC,eAAgB,eAGxBuC,UAAW,CACPD,KAAM,CACFE,mBAAe/D,EACf4B,QAAS,aAEboC,UAAW,CACPC,YAAa,GAEjBC,QAAS,CACLC,WAAY,OA+CbC,EAzCH,WACV,IAAMC,EAAWC,mBAAQ,kBAAMC,wBAAcpB,KAAU,IAEjDqB,EAAUF,mBACd,iBAAM,CACFG,cACAC,cACAC,cACAC,YAAgB,CAAEzB,YAClB0B,YAAyB,CAAE1B,eAE/B,IAGF,OACE,cAAC2B,EAAA,EAAD,CAAevB,MAAOA,EAAtB,SACI,cAACwB,EAAA,EAAD,CAAoBV,SAAUA,EAA9B,SACE,cAACW,EAAA,EAAD,CAAgBR,QAASA,EAASS,aAAa,EAA/C,SACA,cAAC,IAAD,UACA,cAAC,IAAD,CAAqBC,KAAK,iGAA1B,SAEI,cAAC,EAAD,CACE1K,eAAgBA,EAChByB,OAAQA,EACRvE,WAAYA,EACZyI,UAAWkD,EACXnH,SAAUA,EACVwE,UAtDE,iBCtCHyE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.26a380b1.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\n\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport interface CandyMachine {\n  id: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection;\n  program: anchor.Program;\n}\n\ninterface CandyMachineState {\n  candyMachine: CandyMachine;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  goLiveDate: Date,\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = \"recent\",\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineState> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"recent\",\n  });\n\n  const idl = await anchor.Program.fetchIdl(\n    CANDY_MACHINE_PROGRAM,\n    provider\n  );\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n  const candyMachine = {\n    id: candyMachineId,\n    connection,\n    program,\n  }\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  let goLiveDate = state.data.goLiveDate.toNumber();\n  goLiveDate = new Date(goLiveDate * 1000);\n\n  console.log({\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n  })\n\n  return {\n    candyMachine,\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n  };\n}\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getTokenWallet = async (\n  wallet: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey\n) => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachine,\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\n  payer: anchor.web3.PublicKey,\n  treasury: anchor.web3.PublicKey,\n): Promise<string> => {\n  const mint = anchor.web3.Keypair.generate();\n  const token = await getTokenWallet(payer, mint.publicKey);\n  const { connection, program } = candyMachine;\n  const metadata = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const rent = await connection.getMinimumBalanceForRentExemption(\n    MintLayout.span\n  );\n\n  return await program.rpc.mintNft({\n    accounts: {\n      config,\n      candyMachine: candyMachine.id,\n      payer: payer,\n      wallet: treasury,\n      mint: mint.publicKey,\n      metadata,\n      masterEdition,\n      mintAuthority: payer,\n      updateAuthority: payer,\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n    },\n    signers: [mint],\n    instructions: [\n      anchor.web3.SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports: rent,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        payer,\n        payer\n      ),\n      createAssociatedTokenAccountInstruction(\n        token,\n        payer,\n        payer,\n        mint.publicKey\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        token,\n        payer,\n        [],\n        1\n      ),\n    ],\n  });\n}\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\nimport React, { FC, useCallback } from 'react';\n\n\nimport {\n  WalletModalProvider,\n  WalletDisconnectButton,\n  WalletMultiButton\n} from '@solana/wallet-adapter-react-ui';\nimport {\n\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n} from \"./candy-machine\";\nimport { AccountBalance, Height } from \"@material-ui/icons\";\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst CounterText = styled.span``; // add your styles here\n\nconst MintContainer = styled.div``; // add your styles here\n\nconst MintButton = styled(Button)``; // add your styles here\n\n\n\nexport interface HomeProps {\n  candyMachineId: anchor.web3.PublicKey;\n  config: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  treasury: anchor.web3.PublicKey;\n  txTimeout: number;\n}\n\nconst Home = (props: HomeProps) => {\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [itemsAvailable, setItemsAvailable] = useState(0);\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  const refreshCandyMachineState = () => {\n    (async () => {\n      if (!wallet) return;\n\n      const {\n        candyMachine,\n        goLiveDate,\n        itemsAvailable,\n        itemsRemaining,\n        itemsRedeemed,\n      } = await getCandyMachineState(\n        wallet as anchor.Wallet,\n        props.candyMachineId,\n        props.connection\n      );\n\n      setItemsAvailable(itemsAvailable);\n      setItemsRemaining(itemsRemaining);\n      setItemsRedeemed(itemsRedeemed);\n\n      setIsSoldOut(itemsRemaining === 0);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n    })();\n  };\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n      if (wallet && candyMachine?.program) {\n        const mintTxId = await mintOneToken(\n          candyMachine,\n          props.config,\n          wallet.publicKey,\n          props.treasury\n        );\n\n        const status = await awaitTransactionSignatureConfirmation(\n          mintTxId,\n          props.txTimeout,\n          props.connection,\n          \"singleGossip\",\n          false\n        );\n\n        if (!status?.err) {\n          setAlertState({\n            open: true,\n            message: \"\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"The candy machine has let you down\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      // TODO: blech:\n      let message = error.msg || \"Beeb Bop Mint Failed\";\n      if (!error.msg) {\n        if (error.message.indexOf(\"0x138\")) {\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          setIsSoldOut(true);\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n    } finally {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n      setIsMinting(false);\n      refreshCandyMachineState();\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n\n  useEffect(refreshCandyMachineState, [\n    wallet,\n    props.candyMachineId,\n    props.connection,\n  ]);\n\n  return (\n\n    <main \n    style={{\n\n    }}>\n\n\n\n\n         <div \n         style={{\n           color: \"black\",\n          backgroundColor: \"white\",\n          display: \"flex\",\n          textAlign: 'center',\n          justifyContent: \"center\",\n          height: \"20h\",\n          fontFamily: \"VT323\",\n\n         }}>\n           <h1>MINT YOUR STAIN</h1>\n                    </div>\n\n      <div style={{\n        display: \"flex\",\n      textAlign: 'center',\n      fontWeight: 'bold',\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      backgroundColor: \"orange\",\n      padding: \"20px\",\n      height: \"100vh\",\n      fontFamily: \"VT323\",\n      backgroundImage: \"url(\" + \"https://cdn.discordapp.com/attachments/875370923954430013/910880109341335632/beach_at_ogs.png\" + \")\",\n    }}\n    >\n\n\n<div style= {{      border: \"2px solid black\",\n      borderRadius: \"5px\",\n      backgroundImage: \"url(\" + \"https://media.discordapp.net/attachments/875370923954430013/910879937265823764/clean.jpg?width=384&height=384\" + \")\",\n      padding: \"25px\",\n      fontFamily: \"VT323\"\n      \n      }}>\n\n\n\n  {<img src=\"https://cdn.discordapp.com/attachments/902629967274344490/912326730130288660/output-onlinepngtools_6.png\" style={{ width: \"140px\"}}/>} {<img src=\"https://cdn.discordapp.com/attachments/902629967274344490/912323817047724112/output-onlinepngtools_2.png\" style={{ width: \"140px\", borderImage: \"2px\", borderColor: \"black\"}}/>} {<img src=\"https://cdn.discordapp.com/attachments/902629967274344490/912326730574860308/output-onlinepngtools_4.png\" style={{ width: \"140px\"}}/>} {<img src=\"https://cdn.discordapp.com/attachments/902629967274344490/912326730369359912/output-onlinepngtools_5.png\" style={{ width: \"140px\"}}/>} {<img src=\"https://cdn.discordapp.com/attachments/902629967274344490/912326730776190996/output-onlinepngtools_3.png\" style={{ width: \"140px\"}}/>}\n      {<p><h2>The official Solstain mint. Get your own Solstain today{wallet && <div>{itemsAvailable}/{itemsAvailable}\n      </div>}\n        </h2></p>}\n\n      {wallet && <p><h2>Supply: {itemsRemaining} /1777.\n      <div>Price: .2 SOL</div>\n      </h2></p>}\n     \n      {\n      <MintContainer>\n      {!wallet  ? (\n        <ConnectButton\n        style={{\n          fontFamily: \"VT323\",\n          backgroundColor: \"white\",\n          color: \"purple\",\n        }}\n>Select wallet</ConnectButton>\n     \n  ) : (\n        \n\n        <MintButton\n          disabled={isSoldOut || isMinting || !isActive}\n          onClick={onMint}\n          variant=\"contained\"\n          style={{\n            fontFamily: \"VT323\"}}\n          className=\"btn btn-rg btn-auto btn-outline btn-grad on-bg-theme btn-round\"\n        >\n          {isSoldOut ? (\n            \"SOLD OUT BOI\"\n          ) : isActive ? (\n            isMinting ? (\n              <CircularProgress />\n            ) : (\n              \"MINT\"\n            )\n          ) : (\n            <Countdown\n              date={startDate}\n              onMount={({ completed }) => completed && setIsActive(true)}\n              onComplete={() => setIsActive(true)}\n              renderer={renderCounter}\n            />\n          )}\n        </MintButton>\n      )}\n    </MintContainer>\n      }\n      <br />\n      <br />\n\n\n\n     \n      </div>\n      \n     </div>\n     <div \n         style={{\n           color: \"black\",\n          backgroundColor: \"white\",\n          display: \"flex\",\n          textAlign: 'center',\n          justifyContent: \"center\",\n          height: \"15h\",\n          fontFamily: \"VT323\",\n\n         }}>\n           <h1>FAQ</h1>\n                    </div>\n     <div\n\n      style={{\n        display: \"flex\",\n        textAlign: 'center',\n        fontWeight: 'bold',\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        backgroundColor: \"orange\",\n\n        padding: \"20px\",\n        height: \"60vh\",\n        fontFamily: \"VT323\",\n        backgroundImage: \"url(\" + \"https://cdn.discordapp.com/attachments/902629967274344490/914084207091916830/1600x600.png\" + \")\",\n        color: \"white\"\n        \n\n      }}>\n         <h1>How much do the Stains cost ?</h1><h3>Each Stain costs .2 SOL</h3>\n         <br />\n         <h1>Is the team doxed?</h1><h3>Yes the team is doxed</h3>\n         <br />\n         <h1>Where will the Stains get listed ?</h1><h3>Solstains will get listed on ME,DE and alpha art</h3>\n         <br />\n         <h1>When will the mint take place?</h1><h3>The mint will take place on the 29th</h3>\n         \n&nbsp;\n\n    \n         </div>\n         <div \n         style={{\n           color: \"black\",\n          backgroundColor: \"white\",\n          display: \"flex\",\n          textAlign: 'center',\n          justifyContent: \"center\",\n          height: \"15h\",\n          fontFamily: \"VT323\",\n\n         }}>\n           <h1>Roadmap</h1>\n                    </div>\n\n                    <div\n\nstyle={{\n  display: \"flex\",\n  textAlign: 'center',\n  fontWeight: 'bold',\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  backgroundColor: \"orange\",\n\n  padding: \"20px\",\n  height: \"80vh\",\n  fontFamily: \"VT323\",\n  backgroundImage: \"url(\" + \"https://cdn.discordapp.com/attachments/902629967274344490/914084207091916830/1600x600.png\" + \")\",\n  color: \"white\"}}>\n\n\n  <br /><br /><br /><br /><br /><br />\n        <h1>Stage 1</h1><h3>The start all 1777 Stains get launched</h3>\n         <br />\n         <h1>Stage 2</h1><h3>After all of the Solstains are minted we will get listed on multiple exhanges</h3>\n         <br />\n         <h1>Stage 3</h1><h3>We will focus on making the World a better place. We will be donating a big chunck of the mint capital to charity</h3>\n         <br />\n         <h1>Stage 4\n</h1><h3>The stain DAO will be formed. After the Stain DAO will be formed we will start to sweep the floor\n\n</h3>\n<h1>Stage 5\n</h1><h3>The drop.Everyone holding a solstain will be entilied to one free NFT of our new collection\n  \n</h3>\n</div>\n  \n\n\n      <div\n      style={{\n        fontWeight: 'bold',\n        justifyContent: \"center\",\n        height: \"5vh\",\n        display: \"flex\",\n        textAlign: 'center',\n        flexDirection: \"row\",\n        backgroundColor: \"grey\",\n        padding: \"50px\"\n\n\n      \n\n      }}>\n        <br />\n        \n\n<a href=\"https://discord.gg/yAW3Mqp8Pe\"><img src=\"https://www.solstains.xyz/assets/button.id.png\" style={{width: \"50px\"}}></img></a><a href=\"https://discord.gg/yAW3Mqp8Pe\"><img src=\"https://www.solstains.xyz/assets/twitter.png\" style={{width: \"50px\"}}></img></a>\n</div> \n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </main>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\n  return (\n    <CounterText>\n      {hours + (days || 0) * 24} hours, {minutes} minutes, {seconds} seconds\n    </CounterText>\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\n\nimport Home from \"./Home\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolletWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport {\n  WalletModalProvider,\n  WalletDisconnectButton,\n  WalletMultiButton,\n  WalletModal\n} from '@solana/wallet-adapter-react-ui';\n\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst treasury = new anchor.web3.PublicKey(\n  process.env.REACT_APP_TREASURY_ADDRESS!\n);\n\nconst config = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\n);\n\nconst candyMachineId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '15px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n        getPhantomWallet(),\n        getSlopeWallet(),\n        getSolflareWallet(),\n        getSolletWallet({ network }),\n        getSolletExtensionWallet({ network })\n    ],\n    []\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect={true}>\n          <WalletDialogProvider>\n          <WalletModalProvider logo=\"https://cdn.discordapp.com/attachments/902629967274344490/908788472540704788/output_ShNei3.gif\">\n            \n              <Home\n                candyMachineId={candyMachineId}\n                config={config}\n                connection={connection}\n                startDate={startDateSeed}\n                treasury={treasury}\n                txTimeout={txTimeout}\n              />\n              </WalletModalProvider>\n            </WalletDialogProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n);\n};\n\n\n\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ReactCSSTransitionGroup from 'react-transition-group';\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}